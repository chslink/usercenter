// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: user/user.proto

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "usercenter/api/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserServiceGetCurrentUser = "/usercenter.user.UserService/GetCurrentUser"
const OperationUserServiceUpdateUser = "/usercenter.user.UserService/UpdateUser"

type UserServiceHTTPServer interface {
	// GetCurrentUser 获取当前用户信息
	GetCurrentUser(context.Context, *common.Empty) (*common.User, error)
	// UpdateUser 更新用户信息
	UpdateUser(context.Context, *UpdateUserRequest) (*common.User, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/users/me", _UserService_GetCurrentUser0_HTTP_Handler(srv))
	r.PUT("/v1/users/me", _UserService_UpdateUser0_HTTP_Handler(srv))
}

func _UserService_GetCurrentUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in common.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentUser(ctx, req.(*common.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.User)
		return ctx.Result(200, reply)
	}
}

func _UserService_UpdateUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.User)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	GetCurrentUser(ctx context.Context, req *common.Empty, opts ...http.CallOption) (rsp *common.User, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *common.User, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) GetCurrentUser(ctx context.Context, in *common.Empty, opts ...http.CallOption) (*common.User, error) {
	var out common.User
	pattern := "/v1/users/me"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*common.User, error) {
	var out common.User
	pattern := "/v1/users/me"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationUserAdminServiceBanUser = "/usercenter.user.UserAdminService/BanUser"
const OperationUserAdminServiceListUsers = "/usercenter.user.UserAdminService/ListUsers"

type UserAdminServiceHTTPServer interface {
	// BanUser 封禁/解封用户
	BanUser(context.Context, *BanUserRequest) (*common.User, error)
	// ListUsers 用户列表查询
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

func RegisterUserAdminServiceHTTPServer(s *http.Server, srv UserAdminServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/admin/users", _UserAdminService_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/admin/users/{user_id}/ban", _UserAdminService_BanUser0_HTTP_Handler(srv))
}

func _UserAdminService_ListUsers0_HTTP_Handler(srv UserAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminServiceListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _UserAdminService_BanUser0_HTTP_Handler(srv UserAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BanUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminServiceBanUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BanUser(ctx, req.(*BanUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.User)
		return ctx.Result(200, reply)
	}
}

type UserAdminServiceHTTPClient interface {
	BanUser(ctx context.Context, req *BanUserRequest, opts ...http.CallOption) (rsp *common.User, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
}

type UserAdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAdminServiceHTTPClient(client *http.Client) UserAdminServiceHTTPClient {
	return &UserAdminServiceHTTPClientImpl{client}
}

func (c *UserAdminServiceHTTPClientImpl) BanUser(ctx context.Context, in *BanUserRequest, opts ...http.CallOption) (*common.User, error) {
	var out common.User
	pattern := "/v1/admin/users/{user_id}/ban"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAdminServiceBanUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAdminServiceHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/admin/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminServiceListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
