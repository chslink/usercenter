// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: security/security.proto

package security

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSecurityServiceSendVerificationCode = "/usercenter.security.SecurityService/SendVerificationCode"

type SecurityServiceHTTPServer interface {
	// SendVerificationCode 发送验证码（通用接口，可用于注册/登录/找回密码等场景）
	SendVerificationCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error)
}

func RegisterSecurityServiceHTTPServer(s *http.Server, srv SecurityServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/security/codes", _SecurityService_SendVerificationCode0_HTTP_Handler(srv))
}

func _SecurityService_SendVerificationCode0_HTTP_Handler(srv SecurityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecurityServiceSendVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendVerificationCode(ctx, req.(*SendCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendCodeResponse)
		return ctx.Result(200, reply)
	}
}

type SecurityServiceHTTPClient interface {
	SendVerificationCode(ctx context.Context, req *SendCodeRequest, opts ...http.CallOption) (rsp *SendCodeResponse, err error)
}

type SecurityServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSecurityServiceHTTPClient(client *http.Client) SecurityServiceHTTPClient {
	return &SecurityServiceHTTPClientImpl{client}
}

func (c *SecurityServiceHTTPClientImpl) SendVerificationCode(ctx context.Context, in *SendCodeRequest, opts ...http.CallOption) (*SendCodeResponse, error) {
	var out SendCodeResponse
	pattern := "/v1/security/codes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecurityServiceSendVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
