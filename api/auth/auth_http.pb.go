// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: auth/auth.proto

package auth

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthServiceLoginByMobileCode = "/usercenter.auth.AuthService/LoginByMobileCode"
const OperationAuthServiceLoginByMobilePwd = "/usercenter.auth.AuthService/LoginByMobilePwd"
const OperationAuthServiceRefreshToken = "/usercenter.auth.AuthService/RefreshToken"
const OperationAuthServiceRegisterByMobile = "/usercenter.auth.AuthService/RegisterByMobile"
const OperationAuthServiceResetPassword = "/usercenter.auth.AuthService/ResetPassword"

type AuthServiceHTTPServer interface {
	// LoginByMobileCode 手机号+验证码登录
	LoginByMobileCode(context.Context, *LoginMobileRequest) (*AuthResponse, error)
	// LoginByMobilePwd 手机号+密码登录
	LoginByMobilePwd(context.Context, *LoginMobileRequest) (*AuthResponse, error)
	// RefreshToken 刷新访问令牌
	RefreshToken(context.Context, *RefreshRequest) (*AuthResponse, error)
	// RegisterByMobile 手机号+密码注册
	RegisterByMobile(context.Context, *RegisterRequest) (*AuthResponse, error)
	// ResetPassword 忘记密码-重置
	ResetPassword(context.Context, *ResetPwdRequest) (*ResetPwdResponse, error)
}

func RegisterAuthServiceHTTPServer(s *http.Server, srv AuthServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/register/mobile", _AuthService_RegisterByMobile0_HTTP_Handler(srv))
	r.POST("/v1/auth/login/mobile_code", _AuthService_LoginByMobileCode0_HTTP_Handler(srv))
	r.POST("/v1/auth/login/mobile_pwd", _AuthService_LoginByMobilePwd0_HTTP_Handler(srv))
	r.POST("/v1/auth/token/refresh", _AuthService_RefreshToken0_HTTP_Handler(srv))
	r.POST("/v1/auth/password/reset", _AuthService_ResetPassword0_HTTP_Handler(srv))
}

func _AuthService_RegisterByMobile0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceRegisterByMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterByMobile(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginByMobileCode0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginByMobileCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByMobileCode(ctx, req.(*LoginMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginByMobilePwd0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginByMobilePwd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByMobilePwd(ctx, req.(*LoginMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_RefreshToken0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_ResetPassword0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPwdResponse)
		return ctx.Result(200, reply)
	}
}

type AuthServiceHTTPClient interface {
	LoginByMobileCode(ctx context.Context, req *LoginMobileRequest, opts ...http.CallOption) (rsp *AuthResponse, err error)
	LoginByMobilePwd(ctx context.Context, req *LoginMobileRequest, opts ...http.CallOption) (rsp *AuthResponse, err error)
	RefreshToken(ctx context.Context, req *RefreshRequest, opts ...http.CallOption) (rsp *AuthResponse, err error)
	RegisterByMobile(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *AuthResponse, err error)
	ResetPassword(ctx context.Context, req *ResetPwdRequest, opts ...http.CallOption) (rsp *ResetPwdResponse, err error)
}

type AuthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthServiceHTTPClient(client *http.Client) AuthServiceHTTPClient {
	return &AuthServiceHTTPClientImpl{client}
}

func (c *AuthServiceHTTPClientImpl) LoginByMobileCode(ctx context.Context, in *LoginMobileRequest, opts ...http.CallOption) (*AuthResponse, error) {
	var out AuthResponse
	pattern := "/v1/auth/login/mobile_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginByMobileCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) LoginByMobilePwd(ctx context.Context, in *LoginMobileRequest, opts ...http.CallOption) (*AuthResponse, error) {
	var out AuthResponse
	pattern := "/v1/auth/login/mobile_pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginByMobilePwd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshRequest, opts ...http.CallOption) (*AuthResponse, error) {
	var out AuthResponse
	pattern := "/v1/auth/token/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) RegisterByMobile(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*AuthResponse, error) {
	var out AuthResponse
	pattern := "/v1/auth/register/mobile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceRegisterByMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPwdRequest, opts ...http.CallOption) (*ResetPwdResponse, error) {
	var out ResetPwdResponse
	pattern := "/v1/auth/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
