// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"usercenter/bc"
	"usercenter/bc/user"
	"usercenter/config"
	"usercenter/pkg"
	"usercenter/pkg/db"
	"usercenter/pkg/server"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(configConfig *config.Config, logger log.Logger) (*kratos.App, func(), error) {
	serverConfig, err := pkg.NewServerConfig(configConfig)
	if err != nil {
		return nil, nil, err
	}
	httpServer := server.NewHTTPServer(serverConfig, logger)
	grpcServer := server.NewGRPCServer(serverConfig, logger)
	serverServer := server.NewServer(httpServer, grpcServer)
	dbConfig, err := pkg.NewDbConfig(configConfig)
	if err != nil {
		return nil, nil, err
	}
	bunDB, err := db.New(dbConfig)
	if err != nil {
		return nil, nil, err
	}
	userSrv := user.NewSrv()
	app := user.NewApp(userSrv)
	module, cleanup, err := user.NewModule(app, serverServer)
	if err != nil {
		return nil, nil, err
	}
	loader, cleanup2, err := bc.NewLoader(serverServer, bunDB, module)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	kratosApp := newApp(logger, serverServer, loader)
	return kratosApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
